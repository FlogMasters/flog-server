# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project, GKE_EMAIL with the service account email, GKE_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, REGISTRY_HOSTNAME and DEPLOYMENT_NAME environment variables (below).

name: Build and Deploy to GOOGLE COMPUTE ENGINE

on:
  release:
    types: [created]

# Environment variables available to all jobs and steps in this workflow
env:
  GCE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GCE_INSTANCE: flog-server
  GKE_SA_EMAIL: ${{ secrets.GKE_SA_EMAIL }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_ZONE: us-central1-a
  IMAGE: flog_server
  IMAGE_TAG: production
  REGISTRY_HOSTNAME: gcr.io
  ENV_PASSWORD: ${{ secrets.ENV_PASSWORD }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      # Setup gcloud CLI
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '270.0.0'
          service_account_email: ${{ secrets.GKE_SA_EMAIL }}
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Configure docker to use the gcloud command-line tool as a credential helper
      - run: |
          # Set up docker to authenticate
          # via gcloud command-line tool.
          gcloud auth configure-docker

      # 그래들 빌드
      #    - name: Build Gradle
      #      run: |
      #        ./gradlew build

      # Build the Docker image
      - name: Build
        run: |
          docker build -t "$REGISTRY_HOSTNAME"/"$GCE_PROJECT"/"$IMAGE":"$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" .

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |
          docker push "$REGISTRY_HOSTNAME"/"$GCE_PROJECT"/"$IMAGE":"$GITHUB_SHA"

#      - name: Set up kustomize
#        run: |
#          curl -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
#          chmod u+x ./kustomize

      # Deploy the Docker image to the GKE cluster
#      - name: Deploy
#        run: |
#          gcloud container clusters get-credentials $GKE_PROJECT --region asia-east1 --project $GKE_PROJECT
#          # kubectl apply -f deploy/production/flog-service.yaml
#          # kubectl apply -f deploy/production/flog-ingress.yaml
#          # ./kustomize edit set image $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE:$IMAGE_TAG
#          # ./kustomize build . | kubectl apply -f -
#          kubectl apply -f deploy/production/flog-deployment.yaml
#          kuctl rollout status "deployment/$DEPLOYMENT_NAME"
#          echo "complete"

      - name: Deploy
        run: |-
          gcloud compute instances update-container "$GCE_INSTANCE" \
          --zone "$GKE_ZONE" \
          --container-image "gcr.io/$GCE_PROJECT/$IMAGE:$GITHUB_SHA"
          --container-env "PASSWORD=$ENV_PASSWORD,ACTIVE=production"

#       kubectl rollout status "deployment/$DEPLOYMENT_NAME"